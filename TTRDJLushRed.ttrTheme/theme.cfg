-- Background movement types

bmtGelatinousWiggle = 1;

bmtWashingMachine = 2;

bmtScrolling = 3; -- For this, also set backgroundYScrollSpeed and backgroundXScrollSpeed

bmtPulsing = 4;

--



backgroundMovementType = 1;

backgroundXScrollSpeed = 0;

backgroundYScrollSpeed = 1;



initialBackgroundColor = {0.12, 0.45, 0.99};

initialRevengeBackgroundColor = {0.61, 0.05, 0.09};

backgroundColors = {

    missColor = {1, 0, 0},

    badColor = {65, 0, 0},

    okColor = {0, 0, 0},

    goodColor = {0, 0, 0},

    perfectColor = {0, 1, 0}

};

revengeBackgroundColors = {

    missColor = {1, 0, 0},

    badColor = {65, 0, 0},

    okColor = {0, 0, 0},

    goodColor = {0, 0, 0},

    perfectColor = {0, 1, 0}

};



trackLightColors = {

    lev0 = {0.13,0.24,0.56}, -- 1x

    lev1 = {0.13,0.24,0.56}, -- 1x after 10 streak

    lev2 = {0.13,0.24,0.56}, -- 2x

    lev3 = {0.13,0.24,0.56}, -- 3x

    lev4 = {0.13,0.24,0.56}, -- 4x

    lev8 = {0.85,0,0}, -- 8x

    lev16 = {0.85,0,0} -- 16x

};



-------------------------------------------------------------------------------------------------------------------

-- SPECIAL THEME EVENT FUNCTIONS

-------------------------------------------------------------------------------------------------------------------

function theme_initialize()

    game.useDefaultFeedback = true;



    theme_initShaders();

    theme_createObjects();

    

	player = game:firstPlayer();

	

	player:setSplashScaleFromArray({1,1,1});

	

	if (player.playerNumber == 0) then 

		player:setGlowPositionFromArray( { 160, 440, 0} );

	else 

		player:setGlowPositionFromArray( { 160, 40, 0} );

	end

	

	setTimeout(0, "registerFeedbackSettings", nil);

end



function registerFeedbackSettings()

	game:setFeedbackSettings{

	   pathColors = backgroundColors

	};	



end



-----------------------------------

function theme_initShaders()

    revengeShaderWithTextures("background.png", "background-revenge.png", "background", 3, AlphaBlend, "nearest", "nearest");



	if numberOfLocalPlayers == 1 then

	

	revengeShaderWithTextureRegions("parts.png", {0,0,64,64}, {252, 0, 64, 64}, "left_tap", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {64,0,64,64}, {252+64, 0, 64, 64},"middle_tap", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {128,0,64,64}, {252+128, 0, 64, 64}, "right_tap", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {0,64,84,84}, {252, 64, 84, 84}, "shake_left", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {84,64,84,84}, {252+84, 64, 84, 84}, "shake_updown", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {84*2,64,84,84}, {252+84*2, 64, 84, 84}, "shake_right", 7, AlphaBlend, "mipmap");



	revengeShaderWithTextureRegions( "parts.png", {0,148,160,160},{0,148+160,160,160}, "tap_splash_red", 100, AdditiveBlend,"mipmap" );	

	revengeShaderWithTextureRegions( "parts.png", {160,148,160,160},{160,148+160,160,160}, "tap_splash_green", 100, AdditiveBlend,"mipmap" );	

	revengeShaderWithTextureRegions( "parts.png", {160*2,148,160,160}, {160*2,148+160,160,160}, "tap_splash_blue", 100, AdditiveBlend,"mipmap" );	

	    

	simpleShaderWithTextureRegion( "parts2.ng", {160,148,160,160}, "tap_splash", 100, AdditiveBlend, "mipmap" );	

		simpleShaderWithTextureRegion("parts.png", {190,0,64,64}, "special_tap", 7, AlphaBlend);

	simpleShaderWithTextureRegion( "parts2.png", {0,63,344,352-64}, "track_glow", 100, AdditiveBlend, "mipmap" );

    else

	revengeShaderWithTextureRegions("parts.png", {0,0,64,64}, {252, 0, 64, 64}, "left_tap", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {64,0,64,64}, {252+64, 0, 64, 64},"middle_tap", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("parts.png", {128,0,64,64}, {252+128, 0, 64, 64}, "right_tap", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("2p/parts.png", {0,64,84,64}, {252, 64, 84, 64}, "shake_left", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("2p/parts.png", {84,64,84,64}, {252+84, 64, 84, 64}, "shake_updown", 7, AlphaBlend, "mipmap");

	revengeShaderWithTextureRegions("2p/parts.png", {84*2,64,84,64}, {252+84*2, 64, 84, 64}, "shake_right", 7, AlphaBlend, "mipmap");



	simpleShaderWithTextureRegion( "2p/parts.png", {0,256,160,160}, "tap_splash_red", 100, AdditiveBlend, "mipmap" );	

	simpleShaderWithTextureRegion( "2p/parts.png", {160,256,160,160}, "tap_splash_green", 100, AdditiveBlend, "mipmap" );	

	simpleShaderWithTextureRegion( "2p/parts.png", {160*2,256,160,160}, "tap_splash_blue", 100, AdditiveBlend, "mipmap" );	

    end



    simpleShaderWithTextureRegion("parts2.png", {345,148,82,364}, "hold_shader", 6, AdditiveBlend, "mipmap");

    simpleShaderWithTextureRegion("parts2.png",{345+84,148,82,364},  "hold_active_shader", 6, AdditiveBlend, "mipmap");

	

	TTRShader:shaderWithSettings

	{

	performanceFloor = 0.5,

		name = "discoLight",

		sortOrder = 2,

		passes = 

		{

			{

				texture = { filepath = "spinner.png" },

				blend = AlphaProperty,

				bindings = {

					property = AlphaProperty,

					input = "revengeModePercentage",

					transformFunction = InverseTransform

			    }

			},

			{

				texture = { filepath = "spinnerRevenge.png" },

				blend = AlphaProperty,

				bindings = {

					property = AlphaProperty,

					input = "revengeModePercentage"

			    }

			}

		}

	}

end



-----------------------------------

function theme_createObjects()

    game:addScene{ name = "Game" };

	game:addLayer{ name = "Background", scenePath = "Game"};

	game:addLayer{ name = "Space", scenePath = "Game" };

	game:addLayer{ name = "Columns", scenePath = "Game" };

	game:addLayer{ name = "Score", scenePath = "Game"};

	game:addLayer{ name = "FeedbackLayer", scenePath = "Game" };

	

	

end



-----------------------------------

function theme_initOnePlayerMode()

--[[

	backmostSprite = game:addSprite{ 

	   scenePath = "Game/Background", shader = simpleShaderWithTexture("white.png", "whitenoblend", 0, NoBlend, "nearest"), 

	   position = {160, 240, 0}, size = {320, 480}, color = initialBackgroundColor, name = "lightSprite" }; --]]

	game:addSprite{ scenePath = "Game/Background", shader = "background", position = {160, 240, 0}, scale = {1,1, 1}

	};

	theme_initBackgroundEffectSprite();

--	discoLight:setColorFromArray(initialBackgroundColor);



    simpleShaderWithTextureRegion("parts2.png",{0,0,112,63}, "feedbackringL", 6, AdditiveBlend);

    simpleShaderWithTextureRegion("parts2.png",{112,0,112,63}, "feedbackringC", 6, AdditiveBlend);

    simpleShaderWithTextureRegion("parts2.png",{224,0,112,63}, "feedbackringR", 6, AdditiveBlend);

    game:addSprite {

	scenePath = "Game/Columns", shader = "feedbackringL",

	name = "leftFeedbackSprite", position = {55.5,427,0}, color = backgroundColors["perfectColor"],

	minimumFrameRate = 23

    };

    game:addSprite {

	scenePath = "Game/Columns", shader = "feedbackringC",

	name = "centerFeedbackSprite", position = {160,427,0}, color = backgroundColors["perfectColor"],

	minimumFrameRate = 23

    };

    game:addSprite {

	scenePath = "Game/Columns", shader = "feedbackringR",

	name = "rightFeedbackSprite", position = {263,427,0}, color = backgroundColors["perfectColor"],

	minimumFrameRate = 23

    };

    

    trackGlowSprite = game:addSprite {

	scenePath = "Game/Columns", shader = "track_glow", position = {160, 304-32, 0}, color = trackLightColors["lev0"], minimumFrameRate = 24

    };

    

    if not slowDevice or not onlineMode then

	trackGlowAnimator = trackGlowSprite:addFloatAnimator{

		type='float', animatedProperty='alpha',

		pathPoints = curveArrayFromLambdaFunction( function (x)

				return 0.25 * math.sin(x*2*math.pi*5) + 0.75 end ),

		duration = 16, loop = 1

	    };

    end

	



    local origin = {160, 104, 0};

    local leftEnd = {55, 422, 0};

    local middleEnd = {160, 422, 0};

    local rightEnd = {268, 422, 0};

    

    local curveType = "EaseInQuad";

    local timeWindow = 2.0;



    if difficultyLevel == 4 then 

	curveType = "EaseInQuad";

	timeWindow = 2.0;

    end    



    local yCurve = { startValue = origin[2], targetValue = middleEnd[2], curveType = curveType };

    local leftXCurve = { startValue = origin[1], targetValue = leftEnd[1], curveType = curveType };

    local rightXCurve = { startValue = origin[1], targetValue = rightEnd[1], curveType = curveType };

    local scaleCurve = {startValue = 0, targetValue = 1, curveType = curveType };

    

    

	game:addColumn{ 

	   useSmoothTapAndHoldTrails = true,

	   startPosition = origin, 

	   endPosition = leftEnd, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 }, 

	   positionXCurve = leftXCurve,

	   positionYCurve = yCurve,

	   scaleXCurve = scaleCurve, scaleYCurve = scaleCurve,

	   player = 0, 

       scenePath = "Game/Columns", 

	   tapShader = "left_tap", 

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_red",

       tapHoldEmitFrequency = 0.2,

       timeWindow = timeWindow,

	   claimedNote = 60, 

	   claimedNoteWindowStartTime = 0, 

	   claimedNoteWindowDuration = 1000, 

	   }.colorChangeSpritePath = "Game/Columns/leftFeedbackSprite";

	game:addColumn{ 

	   useSmoothTapAndHoldTrails = true,

	   startPosition = origin, 

	   endPosition = middleEnd, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 }, 

	   scaleXCurve = scaleCurve, scaleYCurve = scaleCurve,

	   positionYCurve = yCurve;

	   player = 0,

       scenePath = "Game/Columns",  

	   tapShader = "middle_tap",  

	   tapHoldShader = "hold_shader",

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_green",

       tapHoldEmitFrequency = 0.2,

       timeWindow = timeWindow,

	   claimedNote = 62, 

	   claimedNoteWindowStartTime = 0, 

	   claimedNoteWindowDuration = 1000 

	   }.colorChangeSpritePath = "Game/Columns/centerFeedbackSprite";

	game:addColumn{ 

	   useSmoothTapAndHoldTrails = true,

	   startPosition = origin, 

	   endPosition = rightEnd, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 }, 

	   scaleXCurve = scaleCurve, scaleYCurve = scaleCurve,

	   positionXCurve = rightXCurve,

	   positionYCurve = yCurve,

	   player = 0,

       scenePath = "Game/Columns", 

	   tapShader = "right_tap",  

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_blue",

       tapHoldEmitFrequency = 0.2,

       timeWindow = timeWindow,

	   claimedNote = 64, 

	   claimedNoteWindowStartTime = 0, 

	   claimedNoteWindowDuration = 1000 }.colorChangeSpritePath = "Game/Columns/rightFeedbackSprite";

	

	

	game:addColumn

	{

		startPosition = origin,

		endPosition = leftEnd,

		startScale = { 0, 0, 1 },

	   scaleXCurve = scaleCurve, scaleYCurve = scaleCurve,

		endScale = { 1,1,1 },

	   positionXCurve = leftXCurve,

	   positionYCurve = yCurve,

		player = 0,

	scenePath = "Game/Columns", 

		tapShader = "shake_left",

	   tapSplashShader = "tap_splash_red",

	timeWindow = timeWindow,

		claimedNote = 61, 

		claimedNoteWindowStartTime = 0, 

		claimedNoteWindowDuration = 1000,	

		claimedNoteTapType = 1

	}.colorChangeSpritePath = "Game/Columns/leftFeedbackSprite";

	game:addColumn{ 

	   startPosition = origin, 

	   endPosition = middleEnd, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 }, 

	   scaleXCurve = scaleCurve, scaleYCurve = scaleCurve,

	   positionYCurve = yCurve,

	   player = 0,

       scenePath = "Game/Columns", 

	   tapShader = "shake_updown", 

	   tapSplashShader = "tap_splash_green",

       timeWindow = timeWindow,

	   claimedNote = 65, 

	   claimedNoteWindowStartTime = 0, 

	   claimedNoteWindowDuration = 1000, 

	   claimedNoteTapType = 2 

	   }.colorChangeSpritePath = "Game/Columns/centerFeedbackSprite";

	game:addColumn{ 

	   startPosition = origin, 

	   endPosition = rightEnd, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 }, 

	   scaleXCurve = scaleCurve, scaleYCurve = scaleCurve,

	   positionXCurve = rightXCurve,

	   positionYCurve = yCurve,

	   player = 0, 

       scenePath = "Game/Columns", 

	   tapShader = "shake_right", 

	   tapSplashShader = "tap_splash_blue",

       timeWindow = timeWindow,

	   claimedNote = 63, 

	   claimedNoteWindowStartTime = 0, 

	   claimedNoteWindowDuration = 1000, 

	   claimedNoteTapType = 3 

	   }.colorChangeSpritePath = "Game/Columns/rightFeedbackSprite";

	

end



-----------------------------------

function theme_initTwoPlayerMode()

	discoLight = game:addSprite{

	   scenePath = "Game/Background",

	   shader = simpleShaderWithTexture( "2p/spinner.png", "2pspinnery", 3, NoBlend ),

	   alpha = 1,

	   position = {160, 240, 0},

	   scale = {1.3, 1.3, 1},

	   color = {1,1,1}

	};

	discoSpinAnimator = discoLight:addAnimator{

	type='vec3', animatedProperty='rot',

	zCurve = { pathPoints = curveArrayFromLambdaFunction( function (x)

			return 60 * math.sin(x*2*math.pi) end ) },

	duration = 2, loop = 1

    };

    game:addSprite{ shader = simpleShaderWithTexture( "2p/background-2p.png", "paths", 3, SourcePlusOneMinusSourceAlphaBlend ), alpha = 1, 

	position = {160, 240, 0}, scenePath = "Game/Columns" };

    

    local pathPointsLeft = { 

       {160, 240},

       {50, 433} };

    local pathPointsCenter = {

	{160, 240},

	{160, 433}

    }

    local pathPointsRight = {

	{160, 240},

	{275,433}

    }

    local timeWindow = 1.2;

	scaleCurve = { startValue = 0.05, targetValue = 1, curveType = "EaseInQuad" };

	negativeScaleCurve = { startValue = -0.05, targetValue = -1, curveType = "EaseInQuad" };

	

	function gen2pCurve(colPoints, flip, isX) 

	   local curvePoints = {};

	   local numPoints = #colPoints;

	   local coord;

	   for i=1,numPoints do

	       if isX > 0 then coord = colPoints[i][1] else coord = colPoints[i][2] end

	       if flip > 0 then

		   if isX > 0 then coord = 320 - coord;

		   else coord = 480 - coord;

		   end

	       end

	       curvePoints[i] = {(i - 1) / (numPoints - 1), coord};

	   end

	   return { pathPoints = curvePoints };

	end	      

	

	game:addColumn{ 

	   startPosition = {160,240, 0}, 

	   endPosition = {50,433, 0}, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 }, timeWindow = timeWindow,

	   positionYCurve = gen2pCurve(pathPointsLeft, 0, 0),

	   positionXCurve = gen2pCurve(pathPointsLeft, 0, 1),

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_red",

       tapHoldEmitFrequency = 0.2,

	   useSmoothTapAndHoldTrails = true,

	   scaleXCurve = scaleCurve,

	   scaleYCurve = scaleCurve,

	   tapShader = "left_tap", scenePath = "Game/Columns",

	   player = 0, claimedNote = 60, claimedNoteWindowStartTime = 0, claimedNoteWindowDuration = 1000 }.colorChangeSpritePath = "Game/Score/Ring1InnerLeft";

	   

	game:addColumn{ 

	   startPosition = {160,240, 0}, 

	   endPosition = {160, 433, 0}, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 },  timeWindow = timeWindow,

	   scaleXCurve = scaleCurve,

	   scaleYCurve = scaleCurve,

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_green",

       tapHoldEmitFrequency = 0.2,

	   useSmoothTapAndHoldTrails = true,

	   positionYCurve = gen2pCurve(pathPointsCenter, 0, 0),

	   positionXCurve = gen2pCurve(pathPointsCenter, 0, 1),

	   tapShader = "middle_tap",  scenePath = "Game/Columns",

	   player = 0, claimedNote = 62, claimedNoteWindowStartTime = 0, claimedNoteWindowDuration = 1000}.colorChangeSpritePath = "Game/Score/Ring1InnerMiddle";

	   

	game:addColumn{ 

	   startPosition = {160,240, 0}, 

	   endPosition = {275, 433, 0}, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 },  timeWindow = timeWindow,

	   scaleXCurve = scaleCurve,

	   scaleYCurve = scaleCurve,

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_blue",

       tapHoldEmitFrequency = 0.2,

	   positionYCurve = gen2pCurve(pathPointsRight, 0, 0),

	   positionXCurve = gen2pCurve(pathPointsRight, 0, 1),

	   useSmoothTapAndHoldTrails = true,

	   tapShader = "right_tap",  scenePath = "Game/Columns",

	   player = 0, claimedNote = 64, claimedNoteWindowStartTime = 0, claimedNoteWindowDuration = 1000 }.colorChangeSpritePath = "Game/Score/Ring1InnerRight";

	

	game:addColumn{ 

	   startPosition = {160,240, 0}, 

	   endPosition = {320-275,40, 0}, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 },  timeWindow = timeWindow,

	   scaleXCurve = negativeScaleCurve,

	   scaleYCurve = negativeScaleCurve,

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_blue",

       tapHoldEmitFrequency = 0.2,

	   useSmoothTapAndHoldTrails = true,

	   positionYCurve = gen2pCurve(pathPointsRight, 1, 0),

	   positionXCurve = gen2pCurve(pathPointsRight, 1, 1),

	   tapShader = "right_tap",  scenePath = "Game/Columns",

	   player = 1,	claimedNote = 64, claimedNoteWindowStartTime = 0, claimedNoteWindowDuration = 1000, 

	   startRotation = {0, 0, 180}, endRotation = {0, 0, 180} }.colorChangeSpritePath = "Game/Score/Ring2InnerRight";

	   

	game:addColumn{ 

	   startPosition = {160,240, 0}, 

	   endPosition = {160, 40, 0}, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 },  timeWindow = timeWindow,

	   scaleXCurve = negativeScaleCurve,

	   scaleYCurve = negativeScaleCurve,

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_green",

       tapHoldEmitFrequency = 0.2,

	   useSmoothTapAndHoldTrails = true,

	   positionYCurve = gen2pCurve(pathPointsCenter, 1, 0),

	   positionXCurve = gen2pCurve(pathPointsCenter, 1, 1),

	   tapShader = "middle_tap",  scenePath = "Game/Columns",

	   player = 1, claimedNote = 62, claimedNoteWindowStartTime = 0, claimedNoteWindowDuration = 1000, 

	   startRotation = {0, 0, 180}, endRotation = {0, 0, 180} }.colorChangeSpritePath = "Game/Score/Ring2InnerMiddle";

	   

	game:addColumn{ 

	   startPosition = {160,240, 0}, 

	   endPosition = {320-50, 40, 0}, 

	   startScale = { 0, 0, 1 }, 

	   endScale = { 1,1,1 },  timeWindow = timeWindow,

	   scaleXCurve = negativeScaleCurve,

	   scaleYCurve = negativeScaleCurve,

	   tapHoldShader = "hold_shader", 

	   tapHoldActiveShader = "hold_active_shader",

	   tapSplashShader = "tap_splash_red",

       tapHoldEmitFrequency = 0.2,

	   useSmoothTapAndHoldTrails = true,

	   positionYCurve = gen2pCurve(pathPointsLeft, 1, 0),

	   positionXCurve = gen2pCurve(pathPointsLeft, 1, 1),

	   tapShader = "left_tap",  scenePath = "Game/Columns",

	   player = 1,	claimedNote = 60, claimedNoteWindowStartTime = 0, claimedNoteWindowDuration = 1000, 

	   startRotation = {0, 0, 180}, endRotation = {0, 0, 180} }.colorChangeSpritePath = "Game/Score/Ring2InnerLeft";

end



-----------------------------------

function theme_initChallengeMode()

    

end



-----------------------------------

function theme_initKidsMode()

    

end



-----------------------------------

function theme_eventPlayerHitTap(playerObject, tapObject, positionArray)

    

end



-----------------------------------

function theme_eventPlayerMissedTap(playerObject)

    if (numberOfLocalPlayers == 1) then

	game:setFeedbackSettings{

	   pathColors = backgroundColors

	};	

	backmostSprite:setColorFromArray(initialBackgroundColor);

	transitionDiscoToLevel(0);

	end

end



-----------------------------------

function theme_eventPlayerReachedStreakOf10(playerObject)

    if (numberOfLocalPlayers == 1) then

	transitionDiscoToLevel(1);

    end

end



-----------------------------------

function theme_eventPlayerReachedScoreMultiplier(playerObject, newMultiplier)

    if (numberOfLocalPlayers == 1) then

	if newMultiplier >= 8 then

		game:setFeedbackSettings{

		   pathColors = revengeBackgroundColors

		};	

--		discoLight:setColorFromArray(initialRevengeBackgroundColor);

	end

	if newMultiplier < 8 then

		game:setFeedbackSettings{

		   pathColors = backgroundColors

		};	

--		discoLight:setColorFromArray(initialBackgroundColor);

	end

	transitionDiscoToLevel(newMultiplier);

    end

end



-----------------------------------

function theme_eventPlayerDidChangeLiveRank(playerIndexZeroBased, newRank, rankDelta, tradedPlayerUsername)

    

end



-----------------------------------

function theme_eventPlayerDidReceiveItem(playerIndexZeroBased, itemName, itemDescription, itemQuantity)

    

end



-----------------------------------

function theme_eventPlayerDidDeployItem(playerIndexZeroBased)

    

end



-----------------------------------

function theme_applyItemEffectToPlayer(playerIndexZeroBased, itemName, itemDescription)

    

end



-----------------------------------

function theme_eventAnnounceChallengeWinner(playerIndexZeroBased)

    

end



-----------------------------------

function theme_eventAnnounceTwoPlayerWinner(playerIndexZeroBased)

    

end



-----------------------------------

function theme_eventCompletedGame()

    

end



-----------------------------------

function theme_processTaps(taps)



end



-------------------------------------------------------------------------------------------------------------------

-- OTHER FUNCTIONS

-------------------------------------------------------------------------------------------------------------------



function transitionDiscoToLevel(lev)

    trackGlowSprite:setColorFromArray(trackLightColors["lev" .. lev]);

    lev = lev + 1;

    if discoSpinAnimator then discoSpinAnimator.targetTime = discoSpinAnimator.startTime + 12 / lev; end

    if trackGlowAnimator then trackGlowAnimator.targetTime = trackGlowAnimator.startTime + 24 / lev; end

--[[	discoLight:addAnimator {

	type = "vec3", animatedProperty = "rotVel",

	targetVector = {0, 0, 15 + lev * 7}, duration = 0.5

    }--]]

end





function theme_initBackgroundEffectSprite()

    if backgroundMovementType == bmtGelatinousWiggle then

	simpleShaderWithTexture("spinner.png", "discoLight", 2, AdditiveBlend, "nearest", "nearest");

	discoLight = game:addSprite{

	   scenePath = "Game/Background",

	   shader = "discoLight",

	   alpha = 1,

	   position = {160, 160, 0},

	   scale = {1, 1, 1},

	   size = {320,320},

--	   rotationVelocity = {0, 0, 20},

	   minimumFrameRate = 20

	};

	if not slowDevice or not onlineMode then

		discoSpinAnimator = discoLight:addAnimator{

		type='vec3', animatedProperty='scale',

		xCurve = { pathPoints = curveArrayFromLambdaFunction( function (x)

				return 0.8 * math.sin(x*2*math.pi) + 1.8 end ) },

		yCurve = { pathPoints = curveArrayFromLambdaFunction( function (x)

				return 0.2 * math.sin(x*2*math.pi) + 1.2 end ) },

		duration = 16, loop = 1

	    };

	end

    return end

    if backgroundMovementType == bmtWashingMachine then

	simpleShaderWithTexture("spinner.png", "discoLight", 2, AdditiveBlend, "nearest", "nearest");

	discoLight = game:addSprite{

	   scenePath = "Game/Background",

	   shader = "discoLight",

	   alpha = 1,

	   position = {160, 240, 0},

	   scale = {1.3, 1.3, 1},

	   minimumFrameRate = 20

	};

	discoSpinAnimator = discoLight:addAnimator{

	    type='vec3', animatedProperty='rot',

	    zCurve = { pathPoints = curveArrayFromLambdaFunction( function (x)

			    return 60 * math.sin(x*2*math.pi) end ) },

	    duration = 2, loop = 1

	};

    return end

    if backgroundMovementType == bmtScrolling then

	scrollingShaderWithTexture("spinner.png", "discoLight", 2, AdditiveBlend, backgroundXScrollSpeed, backgroundYScrollSpeed, 1);

	discoLight = game:addSprite{

	   scenePath = "Game/Background",

	   shader = "discoLight",

	   alpha = 1,

	   position = {160, 240, 0},

	   size = {screenWidth, screenHeight},

	   minimumFrameRate = 20

	};

    return end

    if backgroundMovementType == bmtPulsing then

	simpleShaderWithTexture("spinner.png", "discoLight", 2, AdditiveBlend, "nearest", "nearest");

	discoLight = game:addSprite{

	   scenePath = "Game/Background",

	   shader = "discoLight",

	   alpha = 1,

	   position = {160, 240, 0},

	   scale = {1.3, 1.3, 1},

	   minimumFrameRate = 20

	};

	discoSpinAnimator = discoLight:addAnimator{

	    type='float', animatedProperty='alpha',

	    pathPoints = curveArrayFromLambdaFunction( function (x)

			    return 0.5 * math.sin(x*2*math.pi*5) + 0.5 end ),

	    duration = 16, loop = 1

	};

    return end

end





